@page "/diff"
@using Sequence.Connectors.FileSystem.Steps
@using Sequence.Connectors.StructuredData
@using Sequence.Core.Abstractions
@using Sequence.Core.Internal

<DiffEditor Id="@Id" OriginalLanguageHelper='OriginalLanguageHelper'  ModifiedLanguageHelper='ModifiedLanguageHelper' />

@code
{
  public string Id { get; } = Guid.NewGuid().ToString();

  private SCLLanguageHelper? OriginalLanguageHelper { get; set; }
  private SCLLanguageHelper? ModifiedLanguageHelper { get; set; }

  /// <summary>
  /// The JS runtime
  /// </summary>
  [Inject]
  public IJSRuntime Runtime { get; set; } = null!;

  /// <summary>
  /// The Dialog Service
  /// </summary>
  [Inject]
  public IDialogService DialogService { get; set; } = null!;

  /// <summary>
  /// The File System
  /// </summary>
  [Inject]
  public CompoundFileSystem FileSystem { get; set; } = null!;

  /// <summary>
  /// The HttpClient Factory
  /// </summary>
  [Inject]
  public IHttpClientFactory HttpClientFactory { get; set; } = null!;
  
  /// <inheritdoc />
  protected override Task OnInitializedAsync()
  {
    OriginalLanguageHelper = new SCLLanguageHelper(Runtime, CreateStepFactoryStore);
    ModifiedLanguageHelper = new SCLLanguageHelper(Runtime,  CreateStepFactoryStore);

    return base.OnInitializedAsync();
  }

  private static Task<StepFactoryStore> CreateStepFactoryStore()
  {
    var stepFactoryStoreResult = StepFactoryStore.TryCreateFromAssemblies(
      ExternalContext.Default,
      typeof(FileRead).Assembly,
      typeof(ToCSV).Assembly
      );

    return Task.FromResult(stepFactoryStoreResult.Value);
  }

}
